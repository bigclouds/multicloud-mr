#name of the node. Here we define the variable to take the hostname of the machine
node.name=${node.hostname}
#the cluster the node belongs
node.cluster=dd2a
#configuration file for infinispan this is bundled with the engine and can be found
#project_dir/common/src/main/resources/conf
processor.infinispan.file=infinispan-clustered.xml
#filename for the jgroups configuration needed by infinispan
processor.JgroupsFile=jgroups
#define whether we use a persistence layer in ensemble  (recommended value true)
leads.processor.infinispan.persistence=true
#define whether to use leveldb as persistence backend for ensemble (recommended value true)
leads.processor.infinispan.useLevelDB=true

#levelDB configuration values
leads.processor.infinispan.leveldb.blocksize=1
leads.processor.infinispan.leveldb.cachesize=128
leads.processor.infinispan.leveldb.compression=true

#infinispan configuration #define whether we use a persistence layer in ensemble  (recommended value cluster)
node.infinispan.mode=cluster
#number of segments created for each cache inside a micro-cloud
leads.processor.infinispan.segments=90
#LEADS multi-cloud MapReduce engine
#threads used for processing
node.engine.parallelism=1
#use aynchronous put for every put to an infinispan cache  (recommended value true)
node.infinispan.putasync=true
#maximum number of in memory key,value pairs for each cache  (recommended value 1024) large values may slow down the system and result in OutOfMemoryExceptions
node.infinispan.maxentries=1024
#buffer size for cross-cloud communication
node.ensemble.batchsize=500
#minimum number of threads used for putting data locally inside a micro-cloud
node.ensemble.threads=25
#minimum number of threads used for putting data across micro-clouds (batched-puts)
node.ensemble.batchput.threads=25
#multiplier defining the maximum number of threads for putting data both for inter-intra microcloud
node.thread.multiplier=4

#number of TupleEncoders for deserialization of the data exchanged
processor.encoders.size=200

#combiner's buffer size
node.combiner.buffersize=70000
#window size for pipelining
node.continuous.windowSize=1000
#percent of the buffer that the combiner should spill the data
node.combiner.percent=50

#advance engine configuration
#parameter for starting the hotrod server for each node (always set to true)
processor.start.hotrod=true
#size of buffer reading data from the disk
node.list.size=1000
#sleep duration when the buffer above is full
node.sleep.time.milis=2000
node.sleep.time.nanos=10000
#define a certain interface to use for starting ensemble.
#node.interface=eth0
